#!usr/bin/env python
###!/Applications/anaconda/envs/deepchem-env-py35/lib/python3.5
# ------------------------------------------------------------------------------
# Analyze .mol files generated by the user in IQmol and return a free energy score
#
# WOULD LIKE TO DO:
# Usage:
# python manage_confs.py -rmsd 1.0 -tfd 0.2 -ff force_field
    # -r (optional): RMSD threshold
    # -t: TFD threshold
    # -f: force field type, e.g. mmff, uff

# ==============================================================================




import sys, os, pickle
# print(os.getcwd())
home = os.path.expanduser('~')
sys.path.append("./Python/tests")
# print(sys.path)
from conformer_generator import *
from utility_functions import *
# import argparse

# parser = argparse.ArgumentParser()
# parser.add_argument('-ff', "--forcefield"required=True, help='force field')
# parser.add_argument('-r', "--rcutoff, type=float, required=False, help='rmsd threshold')
# parser.add_argument('-t', "--tcutoff", type=float, required=False, help='tfd threshold')
# args = parser.parse_args()
# ff_type = args.ff
# rmsd_threshold = args.rcut
# tfd_threshold = args.tcut

## files from IQMol
scratch_path, scratch_dirs, scratch_files = os.walk("{}/Desktop/iqmol_scratch".format(home)).__next__()
print("Files saved in {}".format(scratch_path))
# print(scratch_path, scratch_dirs, scratch_files)
input_file = [scratch_path+"/input/input.mol"] # what the user starts working with
mol_files = [scratch_path+"/"+f for f in scratch_files if f[-4:] == '.mol'] # only get mol files
# print(mol_files)
num_files = len(mol_files)
# print(num_files)

## .mol files --> 1 .sdf file
molfile_to_sdf(mol_files, outfile=scratch_path+"/conformers.sdf")
## read in SDF to RDKit
mols_out = load_from_sdf(scratch_path + "/conformers.sdf")
print("Files loaded.")

## pruning/uniqueness for Molecule
confgen = ConformerGeneratorCustom(max_conformers=num_files,
                                   rmsd_threshold=rmsd_threshold,
                                   tfd_threshold=tfd_threshold,
                                   force_field=ff_type,
                                   pool_multiplier=1)

## assuming all files are the same molecule,
## consolidate all Molecules into 1 RDKit Molecule such that they become RDKit Conformers
if input_file[0][-4:] != '.sdf':
    input_mol_sdf = molfile_to_sdf(input_file, outfile=scratch_path+"/input/input.sdf")
input_mol = load_from_sdf(scratch_path + "/input/input.sdf")[0]
input_mol.RemoveAllConformers() # remove input Conformer object
mol = confgen.add_conformers_as_Molecules_to_Molecule(input_mol, confs=mols_out)

## pruning
if confgen.rmsd_threshold != None:
    rmsd = ConformerGeneratorCustom.get_conformer_rmsd_fast(mol)
    pruned_mol_rmsd, pruned_rmsd = confgen.prune_conformers(mol, rmsd, measure="rmsd")
if confgen.tfd_threshold != None:
    tfd = ConformerGeneratorCustom.get_tfd_matrix(mol)
    pruned_mol_tfd, pruned_tfd = confgen.prune_conformers(mol, tfd, measure="tfd")

## partition function
print("Calculating score...")
energies_rmsd = confgen.get_conformer_energies(pruned_mol_rmsd)
energies_tfd = confgen.get_conformer_energies(pruned_mol_tfd)
pf_rmsd = np.sum(np.exp(-energies_rmsd/0.593))
pf_tfd = np.sum(np.exp(-energies_tfd/0.593)) # RT = 0.593 kcal/mol
prob_confs_rmsd = [np.exp(-e/0.593)/pf_rmsd for e in energies_rmsd]
prob_confs_tfd = [np.exp(-e/0.593)/pf_tfd for e in energies_tfd]
## free energy score under uniqueness constraint
kT = 4.11e-21/1000 # kJ
F_rmsd = -kT * np.log(pf_rmsd)
F_tfd = -kT * np.log(pf_tfd)
print("partition function (RMSD pruning): {} with {} conformers".format(pf_rmsd, pruned_mol_rmsd.GetNumConformers()))
print("partition function (TFD pruning): {} {} conformers".format(pf_tfd, pruned_mol_tfd.GetNumConformers()))
print("free energy score (RMSD pruning): {} kJ with {} conformers".format(F_rmsd, pruned_mol_rmsd.GetNumConformers()))
print("free energy score (TFD pruning): {} kJ {} conformers".format(F_tfd, pruned_mol_tfd.GetNumConformers()))

## saving
mols_save_dir = scratch_path + "/rdkit_mols/"
os.makedirs(mols_save_dir, exist_ok=True)

with open(mols_save_dir + "pruned_mol_{}rmsd.pkl".format(confgen.rmsd_threshold), 'wb') as pickle_file:
    pickle.dump(pruned_mol_rmsd, pickle_file)
with open(mols_save_dir + "pruned_mol_{}tfd.pkl".format(confgen.tfd_threshold), 'wb') as pickle_file:
    pickle.dump(pruned_mol_tfd, pickle_file)
